SET search_path TO tinder_viejos_egresados, public;
SET DATASTYLE TO 'European';

CREATE DOMAIN tiers AS VARCHAR(16)
	CONSTRAINT tiers_validos CHECK (VALUE IN ('Plus', 'Gold', 'Platinum'));

CREATE DOMAIN sexos AS CHAR(1)
	CONSTRAINT sexos_validos CHECK (VALUE IN ('f', 'm', 'n'));

CREATE DOMAIN orientacion_sexual AS VARCHAR(16)
	CONSTRAINT orientacion_sexual_validos CHECK (VALUE IN ('Heterosexual', 'Gay', 'Lesbiana', 'Bisexual', 'Asexual', 'Demisexual', 'Pansexual', 'Queer', 'Cuestionamiento' ));

CREATE DOMAIN estudios AS VARCHAR(16)
	CONSTRAINT estudios_validos CHECK (VALUE IN ('Maestria', 'Master', 'Especializacion', 'Diplomado', 'Doctorado'));

CREATE DOMAIN tipo_instituciones AS VARCHAR(16)
	CONSTRAINT tipo_instituciones_validos CHECK (VALUE IN ('Politica', 'Economica', 'Juridica', 'Laboral', 'Cientifica', 'Universitaria', 'Artistica'));

CREATE DOMAIN metodo_pago AS VARCHAR(16)
	CONSTRAINT metodo_pago_validos CHECK (VALUE IN ('Tarjeta', 'Paypal'));


CREATE TABLE IF NOT EXISTS cuenta(
	id_cuenta INT GENERATED ALWAYS AS IDENTITY,
	nombre VARCHAR(16) NOT NULL,
	apellido VARCHAR(16) NOT NULL,
	fecha_nacimiento DATE NOT NULL,
	fecha_creacion DATE NOT NULL DEFAULT CURRENT_DATE,
	email VARCHAR(255) UNIQUE,
	contrasena VARCHAR(128) NOT NULL,
	telefono VARCHAR(13) NOT NULL,
	idioma CHAR(3) DEFAULT 'ESP' NOT NULL,
	notificaciones BOOLEAN DEFAULT TRUE NOT NULL, 
	tema BOOLEAN DEFAULT TRUE NOT NULL,
	PRIMARY KEY (id_cuenta)
);

CREATE TABLE IF NOT EXISTS pago(
	id_pago INT GENERATED ALWAYS AS IDENTITY,
	numero_factura INT NOT NULL,
	aprobado BOOLEAN NOT NULL,
	metodo metodo_pago NOT NULL,
	monto INT DEFAULT 0 NOT NULL,
	fecha DATE NOT NULL DEFAULT CURRENT_DATE, 
	documento_factura BYTEA NOT NULL,
 PRIMARY KEY (id_pago)	
);

CREATE TABLE IF NOT EXISTS tarjeta (
    digitos_tarjeta VARCHAR(19) CHECK (numero_tarjeta ~ '^[0-9]{16,19}$'),
	nombre_titular VARCHAR(32) NOT NULL,
	fecha_caducidad DATE NOT NULL,
	codigo_cv VARCHAR(4) CHECK (codigo_cv ~ '^[0-9]{3,4}$'),
	tipo VARCHAR(16) NOT NULL,
	PRIMARY KEY(digitos_tarjeta)
);

CREATE TABLE IF NOT EXISTS tier(
    nombre_tier tiers,
    PRIMARY KEY (nombre_tier)
);

CREATE TABLE IF NOT EXISTS permiso(
    nombre_permiso VARCHAR(100),
    descripcion_permiso VARCHAR(256) NOT NULL,
    PRIMARY KEY (nombre_permiso)
);

CREATE TABLE IF NOT EXISTS chat(
    id_chat INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY (id_chat)
);

CREATE TABLE IF NOT EXISTS institucion (
    dominio VARCHAR(64),
    nombre VARCHAR(32) NOT NULL,
    coordenada VARCHAR(30) NOT NULL,
    tipo tipo_instituciones NOT NULL,
    ano_fundacion INT NOT NULL,
	PRIMARY KEY(dominio)
);

CREATE TABLE IF NOT EXISTS empresa(
    id_empresa INT GENERATED ALWAYS AS IDENTITY,
    nombre_empresa VARCHAR(100) NOT NULL,
    PRIMARY KEY (empresa)
);

CREATE TABLE IF NOT EXISTS perfil(
    id_cuenta INT,
    id_perfil INT GENERATED ALWAYS AS IDENTITY,
    sexo sexos NOT NULL,
    descripcion VARCHAR(256),
    verificado BOOLEAN DEFAULT FALSE NOT NULL,
    coordenada VARCHAR(30) NOT NULL,
    PRIMARY KEY (id_cuenta, id_perfil), 
    CONSTRAINT fk_id_cuenta_perfil
    	FOREIGN KEY (id_cuenta) REFERENCES cuenta(id_cuenta)
         	ON DELETE CASCADE	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS preferencias (
	id_cuenta INT, 
	id_perfil INT, 
	estudio estudios,
	coordanada_origen VARCHAR(30) NOT NULL,
	distancia_maxima INT DEFAULT 0 CHECK (distancia_maxima <= 3000) NOT NULL,
	min_edad INT DEFAULT 30 CHECK (min_edad >= 30 AND min_edad <= 99) NOT NULL,
	max_edad INT DEFAULT 99 CHECK (max_edad >=30 AND max_edad <= 99) NOT NULL,
	PRIMARY KEY (id_cuenta, id_perfil), 
	CONSTRAINT fk_id_cuenta_id_perfil_preferencias
		FOREIGN KEY (id_cuenta, id_perfil) REFERENCES perfil(id_cuenta, id_perfil)
			ON DELETE CASCADE ON UPDATE CASCADE, 
	CONSTRAINT check_edad CHECK (min_edad <= max_edad)
);

CREATE TABLE IF NOT EXISTS mensaje (
    id_chat INT,
    numero_msj INT GENERATED ALWAYS AS IDENTITY,
    id_remitente INT NOT NULL,
    id_destinatario INT NOT NULL,
    visto BOOLEAN DEFAULT FALSE,
    texto TEXT DEFAULT '' NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id_chat, numero_msj),
    CONSTRAINT fk_id_chat_mensaje
        FOREIGN KEY(id_chat) REFERENCES chat(id_chat)
);

CREATE TABLE IF NOT EXISTS suscrita(
    id_cuenta INT,
	nombre_tier tiers,
	fecha_inicio DATE DEFAULT CURRENT_DATE NOT NULL,
	fecha_caducidad DATE NOT NULL,
    PRIMARY KEY (id_cuenta, nombre_tier),
	CONSTRAINT fk_id_cuenta_suscrita
		FOREIGN KEY (id_cuenta) REFERENCES cuenta(id_cuenta)
			ON DELETE CASCADE	ON UPDATE CASCADE,
	CONSTRAINT fk_nombre_tier_suscrita
	FOREIGN KEY (nombre_tier) REFERENCES tier(nombre_tier)
		ON DELETE CASCADE	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS maneja(
    nombre_tier tiers,
	nombre_permiso VARCHAR(100),
    PRIMARY KEY (nombre_tier, nombre_permiso),
	CONSTRAINT fk_nombre_tier_maneja
		FOREIGN KEY (nombre_tier) REFERENCES tier(nombre_tier)
			ON DELETE CASCADE	ON UPDATE CASCADE,
	CONSTRAINT fk_nombre_permiso_maneja
		FOREIGN KEY (nombre_permiso) REFERENCES permiso(nombre_permiso)
			ON DELETE CASCADE	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS likes(
	id_liker INT,  
	id_liked INT,
	super BOOLEAN DEFAULT FALSE NOT NULL,
	timestamp TIMESTAMP NOT NULL,
    PRIMARY KEY (id_liker, id_liked),
	CONSTRAINT fk_id_liker_likes
		FOREIGN KEY (id_liker) REFERENCES cuenta(id_cuenta)
			ON DELETE CASCADE,
	CONSTRAINT fk_id_liked_likes
		FOREIGN KEY (id_liked) REFERENCES cuenta(id_cuenta)
			ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS swipes (
    id_disliker INT,
    id_disliked INT,
    PRIMARY KEY (id_disliker, id_disliked),
    CONSTRAINT fk_id_disliker_swipes
    	FOREIGN KEY (id_disliker) REFERENCES cuenta(id_cuenta)
		ON DELETE CASCADE,
    CONSTRAINT fk_id_disliked_swipes
    	FOREIGN KEY (id_disliked) REFERENCES cuenta(id_cuenta)
		ON DELETE CASCADE,
);


